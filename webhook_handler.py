#!/usr/bin/env python3
"""
FastAPI webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∞ GitHub Pages
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import uvicorn
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="VizokBot WebHook Server", version="1.0.0")

# –î–æ–¥–∞—î–º–æ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production –∫—Ä–∞—â–µ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫
trips_storage: Dict[str, Dict[str, Any]] = {}

class TripData(BaseModel):
    user_id: str
    route: str
    lang: str = "uk"
    timestamp: Optional[str] = None

@app.post("/webhook")
async def receive_webhook(trip_data: TripData):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø–æ—ó–∑–¥–∫–∏ –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∞"""
    try:
        user_id = str(trip_data.user_id)
        
        # –î–æ–¥–∞—î–º–æ timestamp —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if not trip_data.timestamp:
            trip_data.timestamp = datetime.now().isoformat()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        trips_storage[user_id] = {
            "user_id": user_id,
            "route": trip_data.route,
            "lang": trip_data.lang,
            "timestamp": trip_data.timestamp,
            "processed": False
        }
        
        logger.info(f"üì® Received trip data for user {user_id}: {trip_data.route}")
        
        return {
            "status": "success",
            "message": "Trip data received successfully",
            "user_id": user_id
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook data: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/get_trips")
async def get_trips():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –ø–æ—ó–∑–¥–∫–∏"""
    try:
        unprocessed_trips = []
        
        for user_id, trip_data in trips_storage.items():
            if not trip_data.get("processed", False):
                unprocessed_trips.append(trip_data)
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
                trips_storage[user_id]["processed"] = True
        
        logger.info(f"üì§ Returning {len(unprocessed_trips)} unprocessed trips")
        
        return {
            "status": "success",
            "trips": unprocessed_trips,
            "count": len(unprocessed_trips)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting trips: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/clear_data/{user_id}")
async def clear_user_data(user_id: str):
    """–í–∏–¥–∞–ª—è—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        if user_id in trips_storage:
            del trips_storage[user_id]
            logger.info(f"üóëÔ∏è Cleared data for user {user_id}")
        
        return {
            "status": "success",
            "message": f"Data cleared for user {user_id}"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error clearing data for user {user_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/fallback_webhook")
async def fallback_webhook(user_id: str, route: str, lang: str = "uk"):
    """Fallback webhook —á–µ—Ä–µ–∑ GET –∑–∞–ø–∏—Ç (–¥–ª—è –æ–±—Ö–æ–¥—É Mixed Content)"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —è–∫ –ø—Ä–∏ POST –∑–∞–ø–∏—Ç—ñ
        trip_data = {
            "user_id": user_id,
            "route": route,
            "lang": lang,
            "timestamp": datetime.now().isoformat(),
            "processed": False
        }
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
        trips_storage[user_id] = trip_data
        
        logger.info(f"üì® Received fallback trip data for user {user_id}: {route}")
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 1x1 –ø—ñ–∫—Å–µ–ª—å (—â–æ–± image.src –ø—Ä–∞—Ü—é–≤–∞–≤)
        from fastapi.responses import Response
        
        # 1x1 transparent GIF
        gif_data = b'\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\x00\x00\x00\x00\x00\xff\xff\xff\x21\xf9\x04\x01\x00\x00\x00\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02\x04\x01\x00\x3b'
        
        return Response(content=gif_data, media_type="image/gif")
        
    except Exception as e:
        logger.error(f"‚ùå Error processing fallback webhook: {e}")
        # –ù–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É
        gif_data = b'\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\x00\x00\x00\x00\x00\xff\xff\xff\x21\xf9\x04\x01\x00\x00\x00\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02\x04\x01\x00\x3b'
        return Response(content=gif_data, media_type="image/gif")

@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "users_count": len(trips_storage),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/")
async def root():
    """–ö–æ—Ä—ñ–Ω—å API"""
    return {
        "message": "VizokBot WebHook Server",
        "version": "1.0.0",
        "endpoints": {
            "POST /webhook": "Receive trip data",
            "GET /get_trips": "Get unprocessed trips",
            "DELETE /clear_data/{user_id}": "Clear user data",
            "GET /health": "Health check"
        }
    }

if __name__ == "__main__":
    logger.info("üöÄ Starting VizokBot WebHook Server")
    uvicorn.run(
        "webhook_handler:app",
        host="0.0.0.0",
        port=8001,
        reload=False,
        log_level="info"
    ) 