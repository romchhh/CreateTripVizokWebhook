from main import bot, dp, scheduler

from config import *
from ulits.filters import *

from aiogram import types
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from keyboards.client_keyboards import get_start_keyboard
from keyboards.admin_keyboards import *
from database.client_db import *
from database.admin_db import *
import pandas as pd
import datetime, os

from ulits.admin_states import *
import asyncio
from aiogram import types, Dispatcher
from ulits.admin_states import Form
from aiogram.dispatcher.filters import Text
from ulits.admin_functions import format_entities, parse_url_buttons
from ulits.translate import translate



html = 'HTML'


async def antiflood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ –ø–æ—Å–ø—ñ—à–∞–π :)")

async def on_startup(dp):
    me = await bot.get_me()
    print(f'Bot: @{me.username} –∑–∞–ø—É—â–µ–Ω–∏–π!')

async def on_shutdown(dp):
    me = await bot.get_me()
    print(f'Bot: @{me.username} –∑—É–ø–∏–Ω–µ–Ω–∏–π!')


@dp.message_handler(IsAdmin(), lambda message: message.text == "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å üíª")
async def my_parcel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in administrators:
        await message.answer("–í—ñ—Ç–∞—î–º–æ –≤ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ üíª", parse_mode="HTML", reply_markup=admin_keyboard())
    else:
        return
    
    
@dp.message_handler(IsAdmin(), lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def my_parcel(message: types.Message, state: FSMContext):
    user = message.from_user
    user_id = message.from_user.id
    if user_id in administrators:
        keyboard = get_admin_keyboard(user_id)
    else:
        keyboard = get_start_keyboard(user_id)
            
    greeting_message = f"–í—ñ—Ç–∞—î–º–æ, {user.username}! üëã \n–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É —Å–ø—ñ–ª—å–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫ <b>Vizok</b> üöô.\n–ß–∏–º –º–æ–∂–µ–º–æ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ?"
    photo_path = 'data/hello.jpg'
    with open(photo_path, 'rb') as photo:
        await message.answer_photo(photo=photo, caption=greeting_message, reply_markup=keyboard)
        
@dp.message_handler(IsAdmin(), lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistic_handler(message: types.Message):
    total_users = get_users_count()
    active_users = get_active_users_count()

    response_message = (
            f"üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"üì± –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_users}\n"
        )
    await message.answer(response_message, parse_mode="HTML")
        
        
        
        
@dp.message_handler(IsAdmin(), lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤")
async def export_database(message: types.Message):
    today = datetime.datetime.now()
    last_month = today - datetime.timedelta(days=30)
    last_month_str = last_month.strftime("%Y-%m-%d")

    # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ —Ç–∞–±–ª–∏—Ü—ñ users_search –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
    query = """
    SELECT
        user_id,
        COUNT(*) AS search_count,
        GROUP_CONCAT(search_stops, ', ') AS search_stops
    FROM
        users_search
    WHERE
        search_date >= ?
    GROUP BY
        user_id
    """
    cursor.execute(query, (last_month_str,))
    user_search_data = cursor.fetchall()

    if not user_search_data:
        await message.reply("No search data found for the last month.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ users
    user_ids = [row[0] for row in user_search_data]
    placeholders = ','.join('?' * len(user_ids))
    query = f"""
    SELECT
        user_id,
        user_name,
        real_name,
        phone
    FROM
        users
    WHERE
        user_id IN ({placeholders})
    """
    cursor.execute(query, user_ids)
    user_details = cursor.fetchall()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    user_details_dict = {row[0]: row[1:] for row in user_details}

    # –§–æ—Ä–º—É—î–º–æ DataFrame –∑ –¥–∞–Ω–∏–º–∏
    data = []
    for row in user_search_data:
        user_id = row[0]
        search_count = row[1]
        search_stops = row[2]
        user_info = user_details_dict.get(user_id, ("–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ"))
        data.append([user_id, *user_info, search_count, search_stops])

    df = pd.DataFrame(data, columns=['–Ü–î –ø–∞—Å–∞–∂–∏—Ä–∞', '–¢–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º', '–°–ø—Ä–∞–≤–∂–Ω—î —ñ–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤', '–ú–∞—Ä—à—Ä—É—Ç–∏ –ø–æ—à—É–∫—É'])

    # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º —Ä—è–¥–∫–∞
    df.index += 1
    df.reset_index(inplace=True)
    df.rename(columns={'index': '‚Ññ'}, inplace=True)

    # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    writer = pd.ExcelWriter('user_statistics.xlsx', engine='xlsxwriter')
    df.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Excel
    workbook = writer.book
    worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'vcenter',
        'align': 'center',
        'fg_color': '#D9E1F2',
        'border': 1
    })
    
    cell_format = workbook.add_format({
        'text_wrap': True,
        'valign': 'vcenter',
        'align': 'left',
        'border': 1
    })
    
    number_format = workbook.add_format({
        'valign': 'vcenter',
        'align': 'center',
        'border': 1
    })

    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    for col_num, value in enumerate(df.columns.values):
        worksheet.write(0, col_num, value, header_format)
        
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
    worksheet.set_column('A:A', 8, number_format)  # ‚Ññ
    worksheet.set_column('B:B', 15, number_format)  # –Ü–î –ø–∞—Å–∞–∂–∏—Ä–∞
    worksheet.set_column('C:C', 25, cell_format)  # –¢–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º
    worksheet.set_column('D:D', 30, cell_format)  # –°–ø—Ä–∞–≤–∂–Ω—î —ñ–º—è
    worksheet.set_column('E:E', 20, cell_format)  # –¢–µ–ª–µ—Ñ–æ–Ω
    worksheet.set_column('F:F', 25, number_format)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—ñ–≤
    worksheet.set_column('G:G', 70, cell_format)  # –ú–∞—Ä—à—Ä—É—Ç–∏ –ø–æ—à—É–∫—É

    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–æ –¥–∞–Ω–∏—Ö
    for row in range(1, len(df) + 1):
        worksheet.set_row(row, 30)  # –í–∏—Å–æ—Ç–∞ —Ä—è–¥–∫–∞
        for col in range(len(df.columns)):
            if col in [0, 1, 5]:  # –ß–∏—Å–ª–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                worksheet.write(row, col, df.iloc[row-1, col], number_format)
            else:  # –¢–µ–∫—Å—Ç–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                worksheet.write(row, col, df.iloc[row-1, col], cell_format)

    # –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä
    worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)
    
    # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –≤–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫
    worksheet.freeze_panes(1, 0)
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –¥–∞—Ç–æ—é
    title_format = workbook.add_format({
        'bold': True,
        'font_size': 14,
        'align': 'center',
        'valign': 'vcenter'
    })
    worksheet.merge_range(f'A1:G1', f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {last_month_str} - {today.strftime("%Y-%m-%d")}', title_format)
    worksheet.write_row(1, 0, df.columns, header_format)
    
    # –ó–º—ñ—â—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –≤–Ω–∏–∑
    for row in range(len(df) + 1, 1, -1):
        for col in range(len(df.columns)):
            if col in [0, 1, 5]:  # –ß–∏—Å–ª–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                worksheet.write(row + 1, col, df.iloc[row-2, col] if row > 1 else None, number_format)
            else:  # –¢–µ–∫—Å—Ç–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                worksheet.write(row + 1, col, df.iloc[row-2, col] if row > 1 else None, cell_format)

    writer.close()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–∏–≤—Å—è
    excel_file = 'user_statistics.xlsx'
    import os
    if os.path.exists(excel_file):
        print(f"File {excel_file} created successfully.")
    else:
        print(f"File {excel_file} creation failed.")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.reply_document(
        InputFile(excel_file), 
        caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {last_month_str} - {today.strftime('%Y-%m-%d')}", 
        reply_markup=admin_keyboard()
    )
    os.remove(excel_file)  # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    
    
    
    
@dp.message_handler(IsAdmin(), lambda message: message.text == "–ü–æ–ø—É–ª—è—Ä–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏")
async def popular_routes(message: types.Message):
    user_id = message.from_user.id

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-30 –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        cursor.execute('''
            SELECT search_stops, COUNT(*) AS search_count
            FROM users_search
            GROUP BY search_stops
            ORDER BY search_count DESC
            LIMIT 30
        ''')
        popular_routes = cursor.fetchall()

        if popular_routes:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥
            result_message = "üöó <b>–¢–æ–ø-30 –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤:</b>\n\n"
            for index, (route, count) in enumerate(popular_routes, start=1):
                result_message += f"{index}. <b>{route}</b> ‚Äî <i>{count} –ø–æ—à—É–∫—ñ–≤</i>\n"

            await message.answer(result_message, parse_mode="HTML")
        else:
            await message.answer("üîç –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏.", parse_mode="HTML")

    except Exception as e:
        await message.answer("‚ùï –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode="HTML")
        print(f"Error: {e}")



# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "–°–ø–∏—Å–æ–∫ –≤–æ–¥—ñ—ó–≤"
@dp.message_handler(IsAdmin(), lambda message: message.text == "–°–ø–∏—Å–æ–∫ –≤–æ–¥—ñ—ó–≤")
async def ask_start_date(message: types.Message):
    await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î:", reply_markup=get_cancel_keyboard())
    await DriverStats.waiting_for_start_date.set()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏
@dp.message_handler(state=DriverStats.waiting_for_start_date)
async def ask_end_date(message: types.Message, state: FSMContext):
    if message.text == "‚Üê –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.reply("–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é.", reply_markup=admin_keyboard())
        await state.finish()
        return
    try:
        start_date = datetime.datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(start_date=start_date.strftime("%Y-%m-%d"))
        await message.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î:")
        await DriverStats.waiting_for_end_date.set()
    except ValueError:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î.")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
@dp.message_handler(state=DriverStats.waiting_for_end_date)
async def export_database(message: types.Message, state: FSMContext):
    if message.text == "‚Üê –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.reply("–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é.", reply_markup=admin_keyboard())
        await state.finish()
        return
    try:
        end_date = datetime.datetime.strptime(message.text, "%Y-%m-%d")
        user_data = await state.get_data()
        start_date = user_data['start_date']

        if start_date > end_date.strftime("%Y-%m-%d"):
            await message.reply("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –∫—ñ–Ω—Ü–µ–≤–æ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç - –æ—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ñ—ó–≤
        drivers_query = """
        SELECT 
            t.user_id,
            COUNT(t.user_id) AS trip_count,
            AVG(CASE WHEN r.stars IS NOT NULL THEN r.stars END) AS avg_rating,
            MAX(t.date) AS last_trip_date
        FROM trips t
        LEFT JOIN reviews r ON t.user_id = r.receiver_id
        WHERE t.date BETWEEN ? AND ?
        GROUP BY t.user_id
        """
        cursor.execute(drivers_query, (start_date, end_date.strftime("%Y-%m-%d")))
        drivers_stats = cursor.fetchall()

        if not drivers_stats:
            await message.reply("–î–∞–Ω—ñ –ø—Ä–æ –≤–æ–¥—ñ—ó–≤ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            return

        driver_ids = [str(row[0]) for row in drivers_stats]
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –¥—É–∂–∫–∞–º–∏ –¥–ª—è IN clause
        users_query = f"""
        SELECT user_id, user_name, real_name, phone
        FROM users 
        WHERE user_id IN ({','.join(driver_ids)})
        """
        print("Full Query:", users_query)
        
        cursor.execute(users_query)
        users_data = {str(row[0]): row[1:] for row in cursor.fetchall()}
        
        print("Users Data:", users_data)
        # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        data = []
        for driver_stat in drivers_stats:
            user_id = str(driver_stat[0])
            user_info = users_data.get(user_id, ("–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ"))
            data.append([
                user_id,
                user_info[0] or "–ù–µ–≤—ñ–¥–æ–º–æ",  # username
                user_info[1] or "–ù–µ–≤—ñ–¥–æ–º–æ",  # real_name
                user_info[2] or "–ù–µ–≤—ñ–¥–æ–º–æ",  # phone
                driver_stat[1],              # trip_count
                round(driver_stat[2], 2) if driver_stat[2] else 0,  # avg_rating
                driver_stat[3]               # last_trip_date
            ])

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame
        df = pd.DataFrame(data, columns=[
            '–Ü–î –≤–æ–¥—ñ—è', '–¢–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º –≤–æ–¥—ñ—è', '–†–µ–∞–ª—å–Ω–µ —ñ–º—è –≤–æ–¥—ñ—è', 
            '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–æ–¥—ñ—è', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫', '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥', 
            '–î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ—ó–∑–¥–∫–∏'
        ])

        # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º —Ä—è–¥–∫–∞
        df.index += 1
        df.reset_index(inplace=True)
        df.rename(columns={'index': '‚Ññ'}, inplace=True)

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–≤–ø—Ü—ñ–≤
        writer = pd.ExcelWriter('driver_statistics.xlsx', engine='xlsxwriter')
        df.to_excel(writer, index=False, sheet_name='Sheet1')
        worksheet = writer.sheets['Sheet1']
        workbook = writer.book

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'vcenter',
            'align': 'center',
            'fg_color': '#D9E1F2',
            'border': 1
        })

        cell_format = workbook.add_format({
            'text_wrap': True,
            'valign': 'vcenter',
            'align': 'left',
            'border': 1
        })

        number_format = workbook.add_format({
            'valign': 'vcenter',
            'align': 'center',
            'border': 1
        })

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
        worksheet.set_column('A:A', 8, number_format)  # ‚Ññ
        worksheet.set_column('B:B', 15, number_format)  # –Ü–î –≤–æ–¥—ñ—è
        worksheet.set_column('C:C', 25, cell_format)  # –¢–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º
        worksheet.set_column('D:D', 30, cell_format)  # –†–µ–∞–ª—å–Ω–µ —ñ–º'—è
        worksheet.set_column('E:E', 20, cell_format)  # –¢–µ–ª–µ—Ñ–æ–Ω
        worksheet.set_column('F:F', 20, number_format)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫
        worksheet.set_column('G:G', 15, number_format)  # –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥
        worksheet.set_column('H:H', 25, cell_format)  # –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ—ó–∑–¥–∫–∏

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Å–æ—Ç—É —Ä—è–¥–∫—ñ–≤ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–æ –¥–∞–Ω–∏—Ö
        for row in range(1, len(df) + 1):
            worksheet.set_row(row, 30)  # –í–∏—Å–æ—Ç–∞ —Ä—è–¥–∫–∞
            for col in range(len(df.columns)):
                if col in [0, 1, 5, 6]:  # –ß–∏—Å–ª–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                    worksheet.write(row, col, df.iloc[row-1, col], number_format)
                else:  # –¢–µ–∫—Å—Ç–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                    worksheet.write(row, col, df.iloc[row-1, col], cell_format)

        # –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä
        worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)
        
        # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –≤–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫
        worksheet.freeze_panes(1, 0)

        # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –¥–∞—Ç–æ—é
        title_format = workbook.add_format({
            'bold': True,
            'font_size': 14,
            'align': 'center',
            'valign': 'vcenter'
        })
        worksheet.merge_range(f'A1:H1', f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ñ—ó–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date} - {end_date.strftime("%Y-%m-%d")}', title_format)
        worksheet.write_row(1, 0, df.columns, header_format)

        # –ó–º—ñ—â—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –≤–Ω–∏–∑
        for row in range(len(df) + 1, 1, -1):
            for col in range(len(df.columns)):
                if col in [0, 1, 5, 6]:  # –ß–∏—Å–ª–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                    worksheet.write(row + 1, col, df.iloc[row-2, col] if row > 1 else None, number_format)
                else:  # –¢–µ–∫—Å—Ç–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
                    worksheet.write(row + 1, col, df.iloc[row-2, col] if row > 1 else None, cell_format)

        writer.close()

        await message.reply_document(InputFile('driver_statistics.xlsx'), caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ñ—ó–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥", reply_markup=admin_keyboard())
        os.remove('driver_statistics.xlsx')

    except ValueError:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î.")
    finally:
        await state.finish()
         
         
@dp.message_handler(IsAdmin(), lambda message: message.text == "–í–∏–≥—Ä—É–∑–∏—Ç–∏ –ë–î")
async def export_database(message: types.Message):
    cursor.execute('SELECT * FROM users')
    users_data = cursor.fetchall()
    users_columns = [description[0] for description in cursor.description]

    cursor.execute('SELECT * FROM trips')
    trips_data = cursor.fetchall()
    trips_columns = [description[0] for description in cursor.description]

    cursor.execute('SELECT * FROM reviews')
    reviews_data = cursor.fetchall()
    reviews_columns = [description[0] for description in cursor.description]

    users_df = pd.DataFrame(users_data, columns=users_columns)
    trips_df = pd.DataFrame(trips_data, columns=trips_columns)
    reviews_df = pd.DataFrame(reviews_data, columns=reviews_columns)

    with pd.ExcelWriter('database_export.xlsx', engine='xlsxwriter') as writer:
        # –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ–∂–µ–Ω DataFrame –Ω–∞ –æ–∫—Ä–µ–º–∏–π –ª–∏—Å—Ç
        users_df.to_excel(writer, sheet_name='Users', index=False)
        trips_df.to_excel(writer, sheet_name='Trips', index=False)
        reviews_df.to_excel(writer, sheet_name='Reviews', index=False)

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏
        workbook = writer.book

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'vcenter',
            'align': 'center',
            'fg_color': '#D9E1F2',
            'border': 1
        })

        cell_format = workbook.add_format({
            'text_wrap': True,
            'valign': 'vcenter',
            'align': 'left',
            'border': 1
        })

        number_format = workbook.add_format({
            'valign': 'vcenter',
            'align': 'center',
            'border': 1
        })

        date_format = workbook.add_format({
            'num_format': 'yyyy-mm-dd hh:mm',
            'valign': 'vcenter',
            'align': 'center',
            'border': 1
        })

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é Users
        worksheet_users = writer.sheets['Users']
        for col_num, value in enumerate(users_columns):
            worksheet_users.write(0, col_num, value, header_format)
        
        worksheet_users.set_column('A:A', 15)  # user_id
        worksheet_users.set_column('B:B', 25)  # user_name
        worksheet_users.set_column('C:C', 30)  # real_name
        worksheet_users.set_column('D:D', 20)  # phone
        worksheet_users.set_column('E:E', 15)  # role
        worksheet_users.set_column('F:F', 20)  # registration_date
        worksheet_users.set_column('G:G', 15)  # status

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é Trips
        worksheet_trips = writer.sheets['Trips']
        for col_num, value in enumerate(trips_columns):
            worksheet_trips.write(0, col_num, value, header_format)
        
        worksheet_trips.set_column('A:A', 15)  # trip_id
        worksheet_trips.set_column('B:B', 15)  # user_id
        worksheet_trips.set_column('C:C', 25)  # from_location
        worksheet_trips.set_column('D:D', 25)  # to_location
        worksheet_trips.set_column('E:E', 20)  # date
        worksheet_trips.set_column('F:F', 15)  # time
        worksheet_trips.set_column('G:G', 15)  # seats
        worksheet_trips.set_column('H:H', 20)  # car
        worksheet_trips.set_column('I:I', 15)  # status

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é Reviews
        worksheet_reviews = writer.sheets['Reviews']
        for col_num, value in enumerate(reviews_columns):
            worksheet_reviews.write(0, col_num, value, header_format)
        
        worksheet_reviews.set_column('A:A', 15)  # review_id
        worksheet_reviews.set_column('B:B', 15)  # sender_id
        worksheet_reviews.set_column('C:C', 15)  # receiver_id
        worksheet_reviews.set_column('D:D', 15)  # stars
        worksheet_reviews.set_column('E:E', 40)  # comment
        worksheet_reviews.set_column('F:F', 20)  # date

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–æ –¥–∞–Ω–∏—Ö —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Å–æ—Ç—É —Ä—è–¥–∫—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        for worksheet, df in [
            (worksheet_users, users_df),
            (worksheet_trips, trips_df),
            (worksheet_reviews, reviews_df)
        ]:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Å–æ—Ç—É —Ä—è–¥–∫—ñ–≤
            for row in range(1, len(df) + 1):
                worksheet.set_row(row, 30)
                
                # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                for col in range(len(df.columns)):
                    value = df.iloc[row-1, col]
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
                    if isinstance(value, (int, float)):
                        worksheet.write(row, col, value, number_format)
                    elif isinstance(value, (datetime.date, datetime.datetime)):
                        worksheet.write(row, col, value, date_format)
                    else:
                        worksheet.write(row, col, value, cell_format)

            # –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ—Ñ—ñ–ª—å—Ç—Ä
            worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)
            
            # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –≤–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫
            worksheet.freeze_panes(1, 0)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
    with open('database_export.xlsx', 'rb') as file:
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        await bot.send_document(
            message.chat.id,
            document=file,
            caption=f"üìä –ï–∫—Å–ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—ñ–¥ {current_date}"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    os.remove('database_export.xlsx')



@dp.message_handler(IsAdmin(), lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å")
async def show_referral_stats(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
    cursor.execute('''
        SELECT platform, name, code, clicks 
        FROM referral_links 
        ORDER BY platform, clicks DESC
    ''')
    stats = cursor.fetchall()
    
    # –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
    total_ref_clicks = sum(row[3] for row in stats)
    
    # –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –ø—Ä–∏–π—à–ª–∏ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    other_users = total_users - total_ref_clicks
    
    response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏:</b>\n\n"
    current_platform = None
    
    for platform, name, code, clicks in stats:
        if platform != current_platform:
            response += f"\n<b>{platform}:</b>\n"
            current_platform = platform
            
        if total_users > 0:
            percentage = (clicks / total_users) * 100
        else:
            percentage = 0
            
        full_link = f"https://t.me/VizokUAbot?start={code}"
        response += f"- {full_link}\n  –ü–µ—Ä–µ—Ö–æ–¥—ñ–≤: {clicks} ({percentage:.1f}%)\n"
    
    # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if total_users > 0:
        other_percentage = (other_users / total_users) * 100
    else:
        other_percentage = 0
        
    response += f"\n<b>–Ü–Ω—à–µ –¥–∂–µ—Ä–µ–ª–æ:</b>\n"
    response += f"- –ü—Ä—è–º—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏: {other_users} ({other_percentage:.1f}%)\n"
    
    response += f"\n<b>–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b> {total_users}"
    
    await message.answer(response, parse_mode="HTML")


@dp.message_handler(IsAdmin(), lambda message: message.text == "–†–æ–∑—Å–∏–ª–∫–∞")
async def create_post(message: types.Message):
    user_id = message.from_user.id
    description = (
        "<b>–°–¢–í–û–†–ï–ù–ù–Ø –ü–û–°–¢–£:</b>\n\n"
        "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç —ñ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞. "
        "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç, –∞ —Ç–∞–∫–æ–∂ URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏. "
        "–ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞, –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É.\n\n"
        "–ö—Ä–æ–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞:\n"
        "1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏.\n"
        "2. –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n"
        "3. –î–æ–¥–∞–π—Ç–µ URL-–∫–Ω–æ–ø–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n"
        "4. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–æ—Å—Ç —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —Ä–æ–∑—Å–∏–ª–∫—É.\n\n"
        "–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏, –ø–æ—Å—Ç –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞."
    )
    await message.answer(description, parse_mode='HTML', reply_markup=get_broadcast_keyboard())


user_data = {}

def initialize_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {}

@dp.callback_query_handler(Text(startswith='create_post'))
async def process_channel_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    initialize_user_data(user_id)

    await Form.content.set()
    await callback_query.message.edit_text(
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_posts")
        )
    )

@dp.message_handler(state=Form.content, content_types=['text', 'photo', 'video', 'document'])
async def handle_content(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    content_type = message.content_type
    content_info = ""
    media_info = None
    media_type = None
    html_content = None  

    if content_type == 'text':
        content_info = message.text
        entities = message.entities 

        if entities:
            html_content = format_entities(content_info, entities)

        else:
            html_content = content_info 

        await message.answer(html_content, parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        media_type = None
    elif content_type == 'photo':
        media_info = message.photo[-1].file_id
        await message.answer_photo(media_info, reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        media_type = 'photo'
    elif content_type == 'video':
        media_info = message.video.file_id
        await message.answer_video(media_info, reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        media_type = 'video'
    elif content_type == 'document':
        media_info = message.document.file_id
        await message.answer_document(media_info, reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        media_type = 'document'
    else:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç.")
    if html_content:
        user_data[user_id]['content'] = html_content
        await state.update_data(content=html_content)

    user_data[user_id]['media'] = media_info
    user_data[user_id]['media_type'] = media_type

    await state.finish()

    
@dp.callback_query_handler(Text(startswith='media_'))
async def handle_media(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await Form.media.set()
    await callback_query.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–¥—ñ–∞, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_my_post")
        )
    )

@dp.message_handler(state=Form.media, content_types=['photo', 'video', 'document'])
async def handle_media_content(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    media_info = None
    media_type = None
    if message.content_type == 'photo':
        media_info = message.photo[-1].file_id
        media_type = 'photo'
    elif message.content_type == 'video':
        media_info = message.video.file_id
        media_type = 'video'
    elif message.content_type == 'document':
        media_info = message.document.file_id
        media_type = 'document'

    user_data[user_id]['media'] = media_info
    user_data[user_id]['media_type'] = media_type

    content_info = user_data[user_id].get('content')

    if media_info:
        if media_type == 'photo':
            await message.answer_photo(media_info, caption=f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        elif media_type == 'video':
            await message.answer_video(media_info, caption=f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        elif media_type == 'document':
            await message.answer_document(media_info, caption=f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
    else:
        await message.answer(f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))

    await state.finish()

@dp.callback_query_handler(Text(startswith='add_'))
async def handle_description(callback_query: types.CallbackQuery, state: FSMContext):
    await Form.description.set()
    await callback_query.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_my_post")
        )
    )

@dp.message_handler(state=Form.description, content_types=['text'])
async def handle_description_content(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    media_info = user_data[user_id].get('media')
    media_type = user_data[user_id].get('media_type')
    
    content_info = message.text
    entities = message.entities 
    formatted_content = format_entities(content_info, entities)
    
    user_data[user_id]['content'] = formatted_content

    if media_info:
        if media_type == 'photo':
            await message.answer_photo(media_info, caption=formatted_content, parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        elif media_type == 'video':
            await message.answer_video(media_info, caption=formatted_content, parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
        elif media_type == 'document':
            await message.answer_document(media_info, caption=formatted_content, parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))
    else:
        await message.answer(formatted_content, parse_mode='HTML', reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))

    await state.finish()


@dp.callback_query_handler(Text(startswith='url_buttons_'))
async def handle_url_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await Form.url_buttons.set()
    await callback_query.message.answer(
        "<b>URL-–ö–ù–û–ü–ö–ò</b>\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ URL-–∫–Ω–æ–ø–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
        "<code>–ö–Ω–æ–ø–∫–∞ 1 - http://link.com\n"
        "–ö–Ω–æ–ø–∫–∞ 2 - http://link.com</code>\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ <code>' | '</code>, —â–æ–± –¥–æ–¥–∞—Ç–∏ –¥–æ 8 –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥ (–¥–æ–ø—É—Å—Ç–∏–º–æ 15 —Ä—è–¥—ñ–≤):\n\n"
        "<code>–ö–Ω–æ–ø–∫–∞ 1 - http://link.com | –ö–Ω–æ–ø–∫–∞ 2 - http://link.com</code>\n\n",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_my_post")
        ),
        disable_web_page_preview=True 
    )


@dp.message_handler(state=Form.url_buttons, content_types=['text'])
async def handle_url_buttons_content(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    media_info = user_data[user_id].get('media')
    media_type = user_data[user_id].get('media_type')
    content_info = user_data[user_id].get('content')

    url_buttons_text = message.text
    url_buttons = parse_url_buttons(url_buttons_text)

    user_data[user_id]['url_buttons'] = url_buttons

    if media_info:
        if media_type == 'photo':
            await message.answer_photo(media_info, caption=f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, url_buttons))
        elif media_type == 'video':
            await message.answer_video(media_info, caption=f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, url_buttons))
        elif media_type == 'document':
            await message.answer_document(media_info, caption=f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, url_buttons))
    else:
        await message.answer(f"{content_info}", parse_mode='HTML', reply_markup=create_post(user_data, user_id, url_buttons))

    await state.finish()


@dp.callback_query_handler(Text(startswith='bell_'))
async def handle_comments(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if 'bell' not in user_data[user_id]:
        user_data[user_id]['bell'] = 0 
    user_data[user_id]['bell'] = 1 if user_data[user_id]['bell'] == 0 else 0
    await callback_query.message.edit_reply_markup(reply_markup=create_post(user_data, user_id, user_data[user_id].get('url_buttons')))

    
@dp.callback_query_handler(Text(startswith='next_'))
async def handle_url_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    await callback_query.message.answer("<b>üíº –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –í–Ü–î–ü–†–ê–í–ö–ò</b>\n\n"
                                           f"–ü–æ—Å—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–∑—Å–∏–ª–∫–∏.", parse_mode='HTML', reply_markup=publish_post(user_data, user_id))
    
    
    
@dp.callback_query_handler(Text(startswith='publish_'))
async def confirm_publish(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    confirm_keyboard = InlineKeyboardMarkup(row_width=2)
    confirm_keyboard.add(
        InlineKeyboardButton("‚úì –¢–∞–∫", callback_data=f"confirm_publish_"),
        InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel_publish")
    )
    await callback_query.message.edit_text("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É?", reply_markup=confirm_keyboard)

@dp.callback_query_handler(Text(startswith='confirm_publish_'))
async def handle_publish_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    initialize_user_data(user_id)
    
    await callback_query.message.edit_text("–ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...")

    media_info = user_data[user_id].get('media')
    media_type = user_data[user_id].get('media_type')
    content_info = user_data[user_id].get('content')
    url_buttons = user_data[user_id].get('url_buttons')

    bell = user_data[user_id].get('bell', 0) 
    disable_notification = (bell == 0)
    user_ids = get_all_user_ids()

    sent_count = 0
    for recipient_id in user_ids: 
        try:
            translated_content = translate(content_info, recipient_id)
            if media_info:
                if media_type == 'photo':
                    await bot.send_photo(recipient_id, media_info, caption=translated_content, parse_mode='HTML', reply_markup=post_keyboard(user_data, user_id, url_buttons), disable_notification=disable_notification)
                elif media_type == 'video':
                    await bot.send_video(recipient_id, media_info, caption=translated_content, parse_mode='HTML', reply_markup=post_keyboard(user_data, user_id, url_buttons), disable_notification=disable_notification)
                elif media_type == 'document':
                    await bot.send_document(recipient_id, media_info, caption=translated_content, parse_mode='HTML', reply_markup=post_keyboard(user_data, user_id, url_buttons), disable_notification=disable_notification)
            else:
                await bot.send_message(recipient_id, translated_content, parse_mode='HTML', reply_markup=post_keyboard(user_data, user_id, url_buttons), disable_notification=disable_notification)
            sent_count += 1
        except Exception as e:
            print(f"Failed to send message to user {recipient_id}: {e}")
        await asyncio.sleep(2)

    await callback_query.message.answer(f"–ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –¥–ª—è {sent_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!", show_alert=True)


@dp.callback_query_handler(text="back_to_my_post", state=[Form.url_buttons, Form.description, Form.media])
async def process_channel_info(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.delete()

 
@dp.callback_query_handler(text="back_to_posts", state=Form.content)
async def process_channel_info(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await state.finish()
    description = (
        "<b>–°–¢–í–û–†–ï–ù–ù–Ø –ü–û–°–¢–£:</b>\n\n"
        "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç —ñ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞. "
        "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç, –∞ —Ç–∞–∫–æ–∂ URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏. "
        "–ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞, –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É.\n\n"
        "–ö—Ä–æ–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞:\n"
        "1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏.\n"
        "2. –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n"
        "3. –î–æ–¥–∞–π—Ç–µ URL-–∫–Ω–æ–ø–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n"
        "4. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–æ—Å—Ç —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —Ä–æ–∑—Å–∏–ª–∫—É.\n\n"
        "–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏, –ø–æ—Å—Ç –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞."
    )
    await callback_query.message.edit_text(description, parse_mode='HTML', reply_markup=get_broadcast_keyboard())

    
@dp.callback_query_handler(Text(equals='cancel_publish'))
async def cancel_publish(callback_query: types.CallbackQuery):
    await callback_query.answer("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", show_alert=True)
 
@dp.callback_query_handler(text="back_to")
async def process_channel_info(callback_query: types.CallbackQuery):
    await callback_query.message.delete()



def register_admin_callbacks(dp: Dispatcher):
    dp.register_callback_query_handler(process_channel_selection, lambda c: c.data == 'confirm_parcel')