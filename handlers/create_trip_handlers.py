from main import bot, dp, scheduler
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from config import *
from ulits.filters import *
from datetime import datetime, timedelta
from keyboards.client_keyboards import create_edit_calendar, create_trip_calendar
from aiogram.dispatcher import FSMContext
from keyboards.admin_keyboards import get_admin_keyboard
from keyboards.client_keyboards import (get_start_keyboard, get_cancel_keyboard, edit_trip_keyboard, 
                                       create_trip_calendar_repeat, create_hour_keyboard, create_minutes_keyboard,
                                       create_edit_hour_keyboard, create_edit_minutes_keyboard)
from ulits.client_states import AddTrip, ChangeTrip
import re, asyncio, json
from database.client_db import cursor, conn, update_trip_date, update_trip_stops, update_trip_time, get_trip_by_id
from ulits.translate import translate, get_user_lang
from ulits.client_functions import start_message, get_trip_text
from data.texts import *
from handlers.my_profile_handlers import my_trips
import aiohttp


TIME_RANGE_REGEX = r"^(?:[01]?\d|2[0-3]):[0-5]?\d$"


user_trip_data = {}

async def handle_webhook_data(trip_data):
    """–û–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ –∑ webhook"""
    user_id = trip_data.get('user_id')
    route = trip_data.get('route')
    lang = trip_data.get('lang', 'uk')
    
    if user_id and route:
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ
        formatted_route = " ‚ûî ".join(route.split(" -> "))
        user_trip_data[user_id] = {
            "stops": formatted_route,
            "original_route": route
        }
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        user_lang = get_user_lang(user_id)
        keyboard = InlineKeyboardMarkup(row_width=2)
        repeat_options = [
            ('norepeat', repeat_options_text[user_lang]['norepeat']),
            ('daily', repeat_options_text[user_lang]['daily']),
            ('every1day', repeat_options_text[user_lang]['every1day']),
            ('every2days', repeat_options_text[user_lang]['every2days']),
            ('every3days', repeat_options_text[user_lang]['every3days']),
            ('every4days', repeat_options_text[user_lang]['every4days']),
            ('every5days', repeat_options_text[user_lang]['every5days']),
            ('every6days', repeat_options_text[user_lang]['every6days']),
            ('every7days', repeat_options_text[user_lang]['every7days']),
        ]
        for callback, text in repeat_options:
            keyboard.add(InlineKeyboardButton(text, callback_data=f"repeat_{callback}"))
        
        await bot.send_message(
            chat_id=user_id,
            text=translate(f"‚úÖ <b>–ú–∞—Ä—à—Ä—É—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ:</b>\n{formatted_route}\n\n{repeat_options_text[user_lang]['repeat_prompt']}", user_id),
            parse_mode="HTML",
            reply_markup=keyboard
        )
       
        state = FSMContext(storage=dp.storage, chat=user_id, user=user_id)
        await state.set_state(AddTrip.waiting_for_repeat.state)


@dp.message_handler(lambda message: message.text.lower() in map(str.lower, create_trip_text.values()), state='*')
async def my_parcel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    user_id = message.from_user.id
    await message.answer(select_date_text[get_user_lang(user_id)], parse_mode="HTML", reply_markup=create_trip_calendar(user_id))
    

@dp.callback_query_handler(lambda c: c.data.startswith("createtrip_"))
async def handle_date_selection(callback_query: types.CallbackQuery):
    try:
        # –†–æ–∑–±–∏—Ä–∞—î–º–æ callback_data
        selected_date_str = callback_query.data.split("_")[1]
        selected_date = datetime.strptime(selected_date_str, "%Y-%m-%d").date()
        today = datetime.now().date()
        user_id = callback_query.from_user.id

        if selected_date < today:
            await callback_query.answer(past_date_error[get_user_lang(user_id)], show_alert=True)
            return

        user_trip_data[user_id] = {"date": selected_date} 
        await callback_query.message.edit_text(
            select_time_text[get_user_lang(user_id)],
            parse_mode="HTML",
            reply_markup=create_hour_keyboard(user_id)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in date selection: {e}")
        await callback_query.answer(date_selection_error[get_user_lang(user_id)], show_alert=True)


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏
@dp.callback_query_handler(lambda c: c.data.startswith("select_hour_"))
async def handle_hour_selection(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        selected_hour = int(callback_query.data.split("_")[2])
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ö–≤–∏–ª–∏–Ω
        await callback_query.message.edit_text(
            select_minutes_text[get_user_lang(user_id)].format(f"{selected_hour:02d}"),
            parse_mode="HTML",
            reply_markup=create_minutes_keyboard(user_id, selected_hour)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in hour selection: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≥–æ–¥–∏–Ω–∏", show_alert=True)


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ö–≤–∏–ª–∏–Ω
@dp.callback_query_handler(lambda c: c.data.startswith("select_minute_"))
async def handle_minute_selection(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        data_parts = callback_query.data.split("_")
        selected_hour = int(data_parts[2])
        selected_minute = int(data_parts[3])
        
        # –§–æ—Ä–º—É—î–º–æ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM
        selected_time = f"{selected_hour:02d}:{selected_minute:02d}"
        user_trip_data[user_id]["time"] = selected_time

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏
        if "repeat_date" in user_trip_data[user_id]:
            # –¶–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏ - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
            trip_data = user_trip_data[user_id]
            selected_date = trip_data["repeat_date"]
            
            preview_text = translate(f"""
ÔøΩÔøΩ <b>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—ó–∑–¥–∫–∏:</b>

üìÖ <b>–î–∞—Ç–∞:</b> {selected_date.strftime('%d.%m.%Y')}
üïí <b>–ß–∞—Å:</b> {selected_time}
üöô <b>–ê–≤—Ç–æ–º–æ–±—ñ–ª—å:</b> {trip_data['car_mark']}, {trip_data['car_number']}
üë• <b>–í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å:</b> {trip_data['seats']}
üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {trip_data['stops']}
""", user_id)
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton(translate("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", user_id), callback_data="confirm_repeat_trip"),
                InlineKeyboardButton(translate("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", user_id), callback_data="cancel_repeat_trip")
            )
            
            await callback_query.message.edit_text(preview_text, parse_mode="HTML", reply_markup=keyboard)
            await callback_query.answer()
            return

        # –ó–≤–∏—á–∞–π–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
        cursor.execute("SELECT id, mark, number FROM users_cars WHERE user_id = ?", (user_id,))
        cars = cursor.fetchall()

        if not cars:
            user_trip_data[user_id]["car_id"] = None

            keyboard = InlineKeyboardMarkup(row_width=4)
            buttons = [InlineKeyboardButton(text=str(i), callback_data=f"choose_seats_{i}") for i in range(1, 17)]
            keyboard.add(*buttons)
            keyboard.add(
                InlineKeyboardButton(back_button[get_user_lang(user_id)], callback_data="back_to_car"),
            )
            await callback_query.message.edit_text(
                time_selected_text[get_user_lang(user_id)].format(selected_time) + "\n\n" + select_seats_text[get_user_lang(user_id)],
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await callback_query.answer()
            return

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
        keyboard = InlineKeyboardMarkup(row_width=1)
        for car_id, mark, number in cars:
            button_text = f"{mark} : {number}"
            button = InlineKeyboardButton(text=button_text, callback_data=f"choose_car_{car_id}")
            keyboard.add(button)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É
        keyboard.add(InlineKeyboardButton(back_button[get_user_lang(user_id)], callback_data="back_to_time"))

        await callback_query.message.edit_text(
            time_selected_text[get_user_lang(user_id)].format(selected_time) + "\n\n" + select_car_text[get_user_lang(user_id)],
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in minute selection: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ö–≤–∏–ª–∏–Ω", show_alert=True)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
@dp.callback_query_handler(lambda c: c.data == "back_to_date")
async def back_to_date_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(
        select_date_text[get_user_lang(user_id)],
        parse_mode="HTML",
        reply_markup=create_trip_calendar(user_id)
    )
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏
@dp.callback_query_handler(lambda c: c.data == "back_to_hour")
async def back_to_hour_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(
        select_time_text[get_user_lang(user_id)],
        parse_mode="HTML",
        reply_markup=create_hour_keyboard(user_id)
    )
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É (–∑ –≤–∏–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è)
@dp.callback_query_handler(lambda c: c.data == "back_to_time")
async def back_to_time_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(
        select_time_text[get_user_lang(user_id)],
        parse_mode="HTML",
        reply_markup=create_hour_keyboard(user_id)
    )
    await callback_query.answer()
    
    
    
@dp.callback_query_handler(lambda c: c.data.startswith("choose_car_"))
async def handle_car_selection(callback_query: types.CallbackQuery):
    car_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id
    user_trip_data[user_id]["car_id"] = car_id

    keyboard = InlineKeyboardMarkup(row_width=4)

    buttons = [InlineKeyboardButton(text=str(i), callback_data=f"choose_seats_{i}") for i in range(1, 17)]

    keyboard.add(*buttons)
    keyboard.add(
        InlineKeyboardButton(back_button[get_user_lang(user_id)], callback_data="back_to_car"),
    )
    await callback_query.message.edit_text(select_seats_text[get_user_lang(user_id)], reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("back_to_car"), state=[AddTrip.waiting_for_stops, None])
async def handle_car_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    cursor.execute("SELECT id, mark, number FROM users_cars WHERE user_id = ?", (user_id,))
    cars = cursor.fetchall()
    keyboard = InlineKeyboardMarkup(row_width=1)
    for car_id, mark, number in cars:
        button_text = f"{mark} : {number}"
        button = InlineKeyboardButton(text=button_text, callback_data=f"choose_car_{car_id}")
        keyboard.add(button)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É
    keyboard.add(InlineKeyboardButton(back_button[get_user_lang(user_id)], callback_data="back_to_time"))
    
    await callback_query.message.edit_text(select_car_text[get_user_lang(user_id)], reply_markup=keyboard)




@dp.callback_query_handler(lambda c: c.data.startswith("choose_seats_"))
async def handle_seats_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    seats = int(callback_query.data.split("_")[-1])

    user_trip_data[user_id]["seats"] = seats

    # –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è GitHub Pages –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∞
    webapp_url = f"https://romchhh.github.io/CreateTripVizokWebhook/?lang={get_user_lang(user_id)}&user_id={user_id}&create=trip&webhook_url=http://139.59.208.152:8001/webhook"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            "üó∫Ô∏è –î–æ–¥–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç", 
            url=webapp_url
        ),
        InlineKeyboardButton(back_button[get_user_lang(user_id)], callback_data="back_to_car")
    )

    await callback_query.message.edit_text(
        translate("üó∫Ô∏è <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É</b>\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑—Ä—É—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ç –≤–∞—à–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É.", user_id),
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback_query.answer()

@dp.message_handler(state=AddTrip.waiting_for_stops)
async def handle_stops_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.lower() in map(str.lower, cancel_texts.values()) or message.text.lower() == "/start":
        await message.answer(cancel_action_text[get_user_lang(user_id)], reply_markup=get_start_keyboard(user_id))
        await state.finish()
        return
    
    user_input = message.text.strip()
    
    # –û—á–∏—â–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ
    cleaned_stops = []
    for stop in user_input.split():  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ –ø—Ä–æ–±—ñ–ª–∞—Ö
        stop = stop.strip()
        if stop:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑—É–ø–∏–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏
            cleaned_stops.append(stop)
    
    if len(cleaned_stops) < 2:
        await message.reply(min_stops_error[get_user_lang(user_id)])
        return

    # –ó'—î–¥–Ω—É—î–º–æ –∑—É–ø–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    formatted_stops = ", ".join(cleaned_stops)
    user_trip_data[user_id]["stops"] = formatted_stops

    # –ó–∞–ø–∏—Ç—É—î–º–æ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
    user_lang = get_user_lang(user_id)
    keyboard = InlineKeyboardMarkup(row_width=2)
    repeat_options = [
        ('norepeat', repeat_options_text[user_lang]['norepeat']),
        ('daily', repeat_options_text[user_lang]['daily']),
        ('every1day', repeat_options_text[user_lang]['every1day']),
        ('every2days', repeat_options_text[user_lang]['every2days']),
        ('every3days', repeat_options_text[user_lang]['every3days']),
        ('every4days', repeat_options_text[user_lang]['every4days']),
        ('every5days', repeat_options_text[user_lang]['every5days']),
        ('every6days', repeat_options_text[user_lang]['every6days']),
        ('every7days', repeat_options_text[user_lang]['every7days']),
    ]
    for callback, text in repeat_options:
        keyboard.add(InlineKeyboardButton(text, callback_data=f"repeat_{callback}"))
    
    await message.answer(
        repeat_options_text[user_lang]['repeat_prompt'],
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await AddTrip.waiting_for_repeat.set()


@dp.callback_query_handler(lambda c: c.data.startswith("repeat_"), state=AddTrip.waiting_for_repeat)
async def handle_repeat_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_lang = get_user_lang(user_id)
    repeat_choice = callback_query.data.split("_")[1]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
    repeat_text = repeat_options_text[user_lang][repeat_choice]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á, –∞ –Ω–µ –ø–µ—Ä–µ–∫–ª–∞–¥)
    user_trip_data[user_id]["repeat"] = repeat_choice
    user_trip_data[user_id]["repeat_text"] = repeat_text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –æ–∫—Ä–µ–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—ó–∑–¥–∫–∏
    cursor.execute("SELECT mark, number FROM users_cars WHERE id = ?", (user_trip_data[user_id]["car_id"],))
    car_data = cursor.fetchone()

    if car_data:
        car_mark, car_number = car_data
    else:
        car_mark, car_number = "–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ"

    trip_data = user_trip_data[user_id]
    trip_preview_text = new_trip_preview[user_lang].format(
        trip_data['date'].strftime('%d.%m.%Y'),
        trip_data['time'],
        car_mark,
        car_number,
        trip_data['seats'],
        trip_data['stops'],
        trip_data['repeat_text']  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(confirm_trip_button[user_lang], callback_data="confirm_trip"),
        InlineKeyboardButton(cancel_trip_button[user_lang], callback_data="cancel_trip")
    )
    await callback_query.message.edit_text(
        trip_preview_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.finish()
    
@dp.callback_query_handler(lambda c: c.data == "confirm_trip")
async def confirm_trip(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    trip_data = user_trip_data[user_id]
    user_lang = get_user_lang(user_id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
    cursor.execute("SELECT mark, number FROM users_cars WHERE id = ?", (trip_data["car_id"],))
    car_data = cursor.fetchone()

    if car_data:
        car_mark, car_number = car_data
    else:
        car_mark, car_number = "–ù–µ–≤—ñ–¥–æ–º–æ", "–ù–µ–≤—ñ–¥–æ–º–æ"

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏
    def save_trip(date, time, created_at):
        cursor.execute("""
            INSERT INTO trips (user_id, car_id, date, time, car_mark, car_number, seats, stops, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id,
            trip_data["car_id"] if trip_data["car_id"] is not None else 0,
            date.strftime('%Y-%m-%d'),
            time,
            car_mark,
            car_number,
            trip_data["seats"],
            trip_data["stops"],
            created_at
        ))
        return cursor.lastrowid

    # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å –¥–ª—è –ø–æ–ª—è created_at
    created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ø–æ—ó–∑–¥–∫—É
    trip_id = save_trip(trip_data["date"], trip_data["time"], created_at)
    conn.commit()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –ø—ñ—Å–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –ø–æ—ó–∑–¥–∫–∏

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫
    repeat_choice = trip_data.get("repeat", "norepeat")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
    intervals = {
        'norepeat': 0,
        'daily': 1,
        'every1day': 1,
        'every2days': 2,
        'every3days': 3,
        'every4days': 4,
        'every5days': 5,
        'every6days': 6,
        'every7days': 7
    }
    
    interval = intervals.get(repeat_choice, 0)  # –Ø–∫—â–æ –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0 (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å)
    repeated_trips_count = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫
    
    if interval > 0:  # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –ø–æ—ó–∑–¥–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –≤–∞–ª—ñ–¥–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        # –û–±–º–µ–∂–µ–Ω–Ω—è: 2 –º—ñ—Å—è—Ü—ñ –≤–ø–µ—Ä–µ–¥ (60 –¥–Ω—ñ–≤)
        max_date = trip_data["date"] + timedelta(days=60)
        current_date = trip_data["date"] + timedelta(days=interval)
        
        while current_date <= max_date:
            if current_date >= datetime.now().date():  # –ù–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—ó–∑–¥–∫–∏ –≤ –º–∏–Ω—É–ª–æ–º—É
                save_trip(current_date, trip_data["time"], created_at)
                repeated_trips_count += 1
            current_date += timedelta(days=interval)
        conn.commit()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –ø–æ—ó–∑–¥–æ–∫

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ—à—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–∞—à —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥)
    try:
        new_trip_date = trip_data["date"].strftime('%Y-%m-%d')
        new_trip_stops = trip_data["stops"].lower()
        new_trip_stops_list = [stop.strip() for stop in new_trip_stops.split(",")]

        cursor.execute('''
            SELECT id, user_id, wanted_date, search_stops
            FROM users_search
            WHERE found = 0
        ''')
        saved_searches = cursor.fetchall()

        for search in saved_searches:
            search_id, search_user_id, wanted_date, search_stops = search
            wanted_date_obj = datetime.strptime(wanted_date, '%Y-%m-%d').date()
            new_trip_date_obj = datetime.strptime(new_trip_date, '%Y-%m-%d').date()

            if abs((wanted_date_obj - new_trip_date_obj).days) <= 3:
                search_stops_list = [stop.strip().lower() for stop in search_stops.split(" - ")]
                if all(city in new_trip_stops_list for city in search_stops_list):
                    try:
                        start_index = new_trip_stops_list.index(search_stops_list[0])
                        end_index = new_trip_stops_list.index(search_stops_list[1], start_index + 1)
                        if start_index < end_index:
                            cursor.execute('''
                                UPDATE users_search
                                SET found = 1
                                WHERE id = ?
                            ''', (search_id,))
                            conn.commit()
                            
                            cursor.execute('''
                                UPDATE trips
                                SET watched = watched + 1
                                WHERE id = ?
                            ''', (trip_id,))
                            conn.commit()

                            trip_preview = (
                                f"üöó <b>–ó–∞ –≤–∞—à–∏–º –Ω–µ–¥–∞–≤–Ω—ñ–º –∑–∞–ø–∏—Ç–æ–º –∑'—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞ –ø–æ—ó–∑–¥–∫–∞!</b>\n\n"
                                f"üìÖ <b>–î–∞—Ç–∞:</b> {new_trip_date_obj.strftime('%d.%m.%Y')}\n"
                                f"üïí <b>–ß–∞—Å:</b> {trip_data['time']}\n"
                                f"üöô <b>–ê–≤—Ç–æ–º–æ–±—ñ–ª—å:</b> {car_mark}, {car_number}\n"
                                f"üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {new_trip_stops}\n"
                                f"üë• <b>–ú—ñ—Å—Ü—å:</b> {trip_data['seats']}\n\n"
                                "<b>‚ùóÔ∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –í –∂–æ–¥–Ω–æ–º—É —Ä–∞–∑—ñ –Ω–µ —Å–ø–ª–∞—á—É–π—Ç–µ –≤–æ–¥—ñ—è–º –∞–≤–∞–Ω—Å! –ù–µ –¥–∞–π—Ç–µ —Å–µ–±–µ –æ–±–º–∞–Ω—É—Ç–∏!</b>"
                            )
                            
                            markup = InlineKeyboardMarkup(row_width=1).add(
                                InlineKeyboardButton(
                                    text=translate("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–æ–¥—ñ—è", search_user_id),
                                    callback_data=f"view_driver_{user_id}_{trip_id}"
                                ),
                                InlineKeyboardButton(
                                    text=translate("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–≤—Ç–æ", search_user_id),
                                    callback_data=f"view_car_{trip_data['car_id']}"
                                ),
                            )

                            await bot.send_message(
                                chat_id=search_user_id,
                                text=translate(trip_preview, search_user_id),
                                parse_mode="HTML",
                                reply_markup=markup
                            )
                    except ValueError:
                        pass

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ—à—É–∫—ñ–≤: {e}")

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    success_message = translate("‚úÖ <b>–ü–æ—ó–∑–¥–∫—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>", user_id)
    if repeated_trips_count > 0:
        success_message += translate(f"\nüìÖ –î–æ–¥–∞—Ç–∫–æ–≤–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —â–µ {repeated_trips_count} –ø–æ—ó–∑–¥–æ–∫", user_id)
    success_message += translate("\n\n–£–ø—Ä–∞–≤–ª—è—Ç–∏ –≤–∞—à–∏–º–∏ –ø–æ—ó–∑–¥–∫–∞–º–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –≤ —Ä–æ–∑–¥—ñ–ª—ñ <b>'–ú–æ—ó –ø–æ—ó–∑–¥–∫–∏'</b>", user_id)
    
    await callback_query.message.edit_text(
        success_message,
        parse_mode="HTML",
        reply_markup=None
    )
    await asyncio.sleep(0.5)
    await start_message(callback_query.message)
        


@dp.callback_query_handler(lambda c: c.data == "cancel_trip")
async def cancel_trip(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await callback_query.message.delete()
    await callback_query.message.answer(translate("<b>–ü–æ—ó–∑–¥–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b>", user_id), reply_markup=get_start_keyboard(user_id))



@dp.callback_query_handler(lambda c: c.data.startswith('prevpage_') or c.data.startswith('nextpage_'))
async def navigate_trips(callback_query: types.CallbackQuery):
    current_page = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id

    today_minus_3_days = (datetime.now() - timedelta(days=3)).strftime("%Y-%m-%d")
    cursor.execute(
        "SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE user_id = ? AND date > ?",
        (user_id, today_minus_3_days)
    )
    trips = cursor.fetchall()

    if not trips:
        await callback_query.message.answer(translate("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫.", user_id))
        return

    # –†–µ–∞–ª—ñ–∑—É—î–º–æ —Ü–∏–∫–ª—ñ—á–Ω—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
    total_trips = len(trips)
    if callback_query.data.startswith('nextpage_'):
        current_page = (current_page + 1) % total_trips
    else:  # prevpage
        current_page = (current_page - 1) % total_trips

    trip = trips[current_page]
    trip_text = get_trip_text(trip, user_id=callback_query.from_user.id)

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(translate("‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", user_id), callback_data=f"edit_trip_{trip[0]}"),
        InlineKeyboardButton(translate("üóë –í–∏–¥–∞–ª–∏—Ç–∏", user_id), callback_data=f"deletetrip_{trip[0]}"),
    )
    if total_trips > 1:
        navigation_buttons = [
            InlineKeyboardButton(translate("‚¨Ö –ü–æ–ø–µ—Ä–µ–¥–Ω—è", user_id), callback_data=f"prevpage_{current_page}"),
            InlineKeyboardButton(translate("‚û° –ù–∞—Å—Ç—É–ø–Ω–∞", user_id), callback_data=f"nextpage_{current_page}"),
        ]
        keyboard.row(*navigation_buttons)

    await callback_query.message.edit_text(
        trip_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    

@dp.callback_query_handler(lambda c: c.data.startswith('deletetrip_'))
async def confirm_delete_trip(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    trip_id = callback_query.data.split('_')[-1]  
    confirm_text = translate("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø–æ—ó–∑–¥–∫—É?", user_id)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(translate("–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", user_id), callback_data=f"confirmdelete_trip_{trip_id}"),
        InlineKeyboardButton(translate("–°–∫–∞—Å—É–≤–∞—Ç–∏", user_id), callback_data=f"cancel_delete_trip_{trip_id}")
    )
    await callback_query.message.edit_text(
        confirm_text,
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith('confirmdelete_trip_'))
async def delete_trip(callback_query: types.CallbackQuery):
    trip_id = callback_query.data.split('_')[-1]
    user_id = callback_query.from_user.id
    cursor.execute("DELETE FROM trips WHERE id = ?", (trip_id,))
    conn.commit()

    is_archive = False
    await callback_query.message.edit_text(translate("<b>–ü–æ—ó–∑–¥–∫–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞.</b>", user_id), parse_mode="HTML", reply_markup=None)
    
    current_page = 0
    today_minus_3_days = (datetime.now() - timedelta(days=3)).strftime("%Y-%m-%d")
    cursor.execute(
        "SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE user_id = ? AND date > ?",
        (user_id, today_minus_3_days)
    )
    trips = cursor.fetchall()
    if not trips:
        await callback_query.message.answer(translate("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫."), user_id)
        return
    trip = trips[current_page]
    trip_text = get_trip_text(trip, user_id = callback_query.from_user.id)
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if not is_archive:
        keyboard.add(
            InlineKeyboardButton(translate("‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", user_id), callback_data=f"edit_trip_{trip[0]}"),
            InlineKeyboardButton(translate("üóë –í–∏–¥–∞–ª–∏—Ç–∏", user_id), callback_data=f"deletetrip_{trip[0]}")
        )
    
    navigation_buttons = []
    if len(trips) > 1:
        repeat_button = InlineKeyboardButton(
            translate("‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É", user_id), 
            callback_data=f"repeat_trip_{trip[0]}"
        )
        prev_button = InlineKeyboardButton(
            translate("‚¨Ö –ü–æ–ø–µ—Ä–µ–¥–Ω—è", user_id) if current_page > 0 else " ",
            callback_data=f"prevpage_{current_page - 1}_{is_archive}" if current_page > 0 else "none"
        )
        next_button = InlineKeyboardButton(
            translate("‚û° –ù–∞—Å—Ç—É–ø–Ω–∞", user_id) if current_page < len(trips) - 1 else " ",
            callback_data=f"nextpage_{current_page + 1}_{is_archive}" if current_page < len(trips) - 1 else "none"
        )
        navigation_buttons = [prev_button, next_button]
        keyboard.add(repeat_button)
        keyboard.row(*navigation_buttons)
    
    keyboard.add(InlineKeyboardButton(translate("‚Üê –ù–∞–∑–∞–¥", user_id), callback_data="back_to_trips"))

    await callback_query.message.answer(
        trip_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith('cancel_delete_trip_'))
async def cancel_delete_trip(callback_query: types.CallbackQuery):
    current_page = 0
    user_id = callback_query.from_user.id
    today = datetime.now().date()
    today_str = today.strftime("%Y-%m-%d")
    is_archive = False
    cursor.execute(
            """
            SELECT id, date, time, car_mark, car_number, stops, seats, watched 
            FROM trips 
            WHERE user_id = ? AND date >= ? 
            ORDER BY date ASC, time ASC
            """,
            (user_id, today_str)
        )
    trips = cursor.fetchall()
    if not trips:
        await callback_query.message.answer(translate("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫.", user_id))
        return
    
    trip = trips[current_page]
    trip_text = get_trip_text(trip, user_id) 
    
    if current_page >= len(trips):
        current_page = len(trips) - 1
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if not is_archive:
        keyboard.add(
            InlineKeyboardButton(translate("‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", user_id), callback_data=f"edit_trip_{trip[0]}"),
            InlineKeyboardButton(translate("üóë –í–∏–¥–∞–ª–∏—Ç–∏", user_id), callback_data=f"deletetrip_{trip[0]}")
        )
    
    navigation_buttons = []
    if len(trips) > 1:
        repeat_button = InlineKeyboardButton(
            translate("‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É", user_id), 
            callback_data=f"repeat_trip_{trip[0]}"
        )
        prev_button = InlineKeyboardButton(
            translate("‚¨Ö –ü–æ–ø–µ—Ä–µ–¥–Ω—è", user_id) if current_page > 0 else " ",
            callback_data=f"prevpage_{current_page - 1}_{is_archive}" if current_page > 0 else "none"
        )
        next_button = InlineKeyboardButton(
            translate("‚û° –ù–∞—Å—Ç—É–ø–Ω–∞", user_id) if current_page < len(trips) - 1 else " ",
            callback_data=f"nextpage_{current_page + 1}_{is_archive}" if current_page < len(trips) - 1 else "none"
        )
        navigation_buttons = [prev_button, next_button]
        keyboard.add(repeat_button)
        keyboard.row(*navigation_buttons)
    
    keyboard.add(InlineKeyboardButton(translate("‚Üê –ù–∞–∑–∞–¥", user_id), callback_data="back_to_trips"))

    await callback_query.message.edit_text(
        trip_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
        
        
@dp.callback_query_handler(lambda c: c.data.startswith('edit_trip_'))
async def edit_trip(callback_query: types.CallbackQuery):
    trip_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id
    
    cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
    trip = cursor.fetchone()
    
    if not trip:
        await callback_query.message.answer(translate("–ü–æ—ó–∑–¥–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."), user_id)
        return
    
    trip_text = get_trip_text(trip, user_id = callback_query.from_user.id)
    await callback_query.message.edit_text(
        f"{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
        parse_mode="HTML",
        reply_markup=edit_trip_keyboard(user_id, trip_id)
    )

        
        
@dp.callback_query_handler(lambda c: c.data.startswith('changedate_'))
async def edit_trip_date(callback_query: types.CallbackQuery):
    trip_id = int(callback_query.data.split('_')[-1])
    user_id = callback_query.from_user.id   
    await callback_query.message.edit_text(
        translate("<b>–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏:</b>", user_id), 
        parse_mode="HTML", 
        reply_markup=create_edit_calendar(user_id, trip_id)
    )
        
        
@dp.callback_query_handler(lambda c: c.data.startswith("edittrip_"))
async def handle_edit_date_selection(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        callback_data = callback_query.data.split("_")
        selected_date_str = callback_data[1]
        trip_id = int(callback_data[-1])

        selected_date = datetime.strptime(selected_date_str, "%Y-%m-%d").date()
        today = datetime.now().date()
        if selected_date < today:
            await callback_query.answer(translate(
                "‚ùï –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–∏—Ä–∞—Ç–∏ –¥–∞—Ç—É, —è–∫–∞ –≤–∂–µ –ø—Ä–æ–π—à–ª–∞!", user_id), show_alert=True
            )
            return
        try:
            update_trip_date(trip_id, selected_date)
            cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
            trip = cursor.fetchone()
            trip_text = get_trip_text(trip, user_id = callback_query.from_user.id)
            await callback_query.message.edit_text(
                f"{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
                parse_mode="HTML",
                reply_markup=edit_trip_keyboard(user_id, trip_id)
            )

        except Exception as e:
            await callback_query.answer(translate(
                "‚ùï –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", user_id),
                show_alert=True
            )
            print(f"Error updating trip date: {e}")
    except Exception as e:
        print(f"Error in edit date selection: {e}")
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–∞—Ç–∏", user_id), show_alert=True)


@dp.callback_query_handler(lambda c: c.data.startswith("calendar_nav_edit_"))
async def handle_edit_calendar_navigation(callback_query: types.CallbackQuery):
    try:
        parts = callback_query.data.split("_")
        direction = parts[3]
        current_year = int(parts[4])
        current_month = int(parts[5])
        trip_id = int(parts[6])
        
        if direction == "prev":
            if current_month == 1:
                new_month = 12
                new_year = current_year - 1
            else:
                new_month = current_month - 1
                new_year = current_year
        else:  # next
            if current_month == 12:
                new_month = 1
                new_year = current_year + 1
            else:
                new_month = current_month + 1
                new_year = current_year
        
        user_id = callback_query.from_user.id
        markup = create_edit_calendar(user_id, trip_id, new_year, new_month)
            
        await callback_query.message.edit_reply_markup(reply_markup=markup)
        await callback_query.answer()
        
    except Exception as e:
        print(f"Error in calendar navigation: {e}")
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è", user_id), show_alert=True)

    
        
        
@dp.callback_query_handler(lambda c: c.data.startswith('changetime_'))
async def edit_trip_time(callback_query: types.CallbackQuery):
    trip_id = int(callback_query.data.split('_')[-1])
    user_id = callback_query.from_user.id

    await callback_query.message.edit_text(
        select_time_text[get_user_lang(user_id)],
        parse_mode="HTML",
        reply_markup=create_edit_hour_keyboard(user_id, trip_id)
    )
    await callback_query.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
@dp.callback_query_handler(lambda c: c.data.startswith("edit_select_hour_"))
async def handle_edit_hour_selection(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        data_parts = callback_query.data.split("_")
        selected_hour = int(data_parts[3])
        trip_id = int(data_parts[4])
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ö–≤–∏–ª–∏–Ω
        await callback_query.message.edit_text(
            select_minutes_text[get_user_lang(user_id)].format(f"{selected_hour:02d}"),
            parse_mode="HTML",
            reply_markup=create_edit_minutes_keyboard(user_id, selected_hour, trip_id)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in edit hour selection: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≥–æ–¥–∏–Ω–∏", show_alert=True)


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ö–≤–∏–ª–∏–Ω –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
@dp.callback_query_handler(lambda c: c.data.startswith("edit_select_minute_"))
async def handle_edit_minute_selection(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        data_parts = callback_query.data.split("_")
        selected_hour = int(data_parts[3])
        selected_minute = int(data_parts[4])
        trip_id = int(data_parts[5])
        
        # –§–æ—Ä–º—É—î–º–æ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM
        selected_time = f"{selected_hour:02d}:{selected_minute:02d}"
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø–æ—ó–∑–¥–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        update_trip_time(trip_id, selected_time)
        cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
        trip = cursor.fetchone()
        trip_text = get_trip_text(trip, user_id=user_id)
        
        await callback_query.message.edit_text(
            translate("‚úÖ <b>–ß–∞—Å –ø–æ—ó–∑–¥–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∏–π!</b>", user_id) + f"\n\n{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
            parse_mode="HTML",
            reply_markup=edit_trip_keyboard(user_id, trip_id)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in edit minute selection: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —á–∞—Å—É", show_alert=True)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith("back_to_edit_trip_"))
async def back_to_edit_trip(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        trip_id = int(callback_query.data.split("_")[-1])
        
        cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
        trip = cursor.fetchone()
        
        if not trip:
            await callback_query.answer(translate("‚ùï –ü–æ—ó–∑–¥–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", user_id), show_alert=True)
            return
        
        trip_text = get_trip_text(trip, user_id=user_id)
        await callback_query.message.edit_text(
            f"{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
            parse_mode="HTML",
            reply_markup=edit_trip_keyboard(user_id, trip_id)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in back to edit trip: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞", show_alert=True)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ
@dp.callback_query_handler(lambda c: c.data.startswith("back_to_edit_hour_"))
async def back_to_edit_hour(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        trip_id = int(callback_query.data.split("_")[-1])
        
        await callback_query.message.edit_text(
            select_time_text[get_user_lang(user_id)],
            parse_mode="HTML",
            reply_markup=create_edit_hour_keyboard(user_id, trip_id)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"Error in back to edit hour: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞", show_alert=True)

    
        
        
@dp.callback_query_handler(lambda c: c.data.startswith('changestops_'))
async def edit_trip(callback_query: types.CallbackQuery, state: FSMContext):
    trip_id = int(callback_query.data.split('_')[-1])
    user_id = callback_query.from_user.id
    await state.update_data(trip_id=trip_id)

    await callback_query.message.answer(
        translate(
            "üìç –í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–æ—á–∫—É, –ø—Ä–æ–º—ñ–∂–Ω—ñ –∑—É–ø–∏–Ω–∫–∏ —Ç–∞ –∫—ñ–Ω—Ü–µ–≤—É —Ç–æ—á–∫—É –ø–æ—ó–∑–¥–∫–∏ <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª</b>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <b>–ö–∏—ó–≤ –ß–µ—Ä–∫–∞—Å–∏ –í—ñ–Ω–Ω–∏—Ü—è –õ—å–≤—ñ–≤ –í–∞—Ä—à–∞–≤–∞</b>", 
            user_id
        ),
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(user_id)
    )
    await callback_query.answer()
    await ChangeTrip.waiting_for_changestops.set()

@dp.message_handler(state=ChangeTrip.waiting_for_changestops)
async def handle_posting_time_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.strip()

    if message.text.lower() in map(str.lower, cancel_texts.values()) or message.text.lower() == "/start":
        await message.answer(translate("–°–∫–∞—Å–æ–≤—É—é..", user_id), reply_markup=get_start_keyboard(user_id))
        await my_trips(message, state)
        await state.finish()
        return

    state_data = await state.get_data()
    trip_id = state_data.get("trip_id")

    if trip_id is None:
        await message.reply(translate("‚ùï –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."), user_id)
        await state.finish()
        return

    # –û—á–∏—â–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ
    cleaned_stops = []
    for stop in user_input.split():  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ –ø—Ä–æ–±—ñ–ª–∞—Ö
        stop = stop.strip()
        if stop:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑—É–ø–∏–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏
            cleaned_stops.append(stop)
    
    if len(cleaned_stops) < 2:
        await message.reply(translate(
            "‚ùï –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –∑—É–ø–∏–Ω–∫–∏ (–ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–∞ –∫—ñ–Ω—Ü–µ–≤—É —Ç–æ—á–∫–∏).", 
            user_id
        ))
        return

    # –ó'—î–¥–Ω—É—î–º–æ –∑—É–ø–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    formatted_stops = ", ".join(cleaned_stops)

    try:
        update_trip_stops(trip_id, formatted_stops)
        cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
        trip = cursor.fetchone()
        trip_text = get_trip_text(trip, user_id = message.from_user.id)
        await message.answer(
            translate("‚úÖ <b>–ó—É–ø–∏–Ω–∫–∏ –ø–æ—ó–∑–¥–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ!</b>", user_id),
            parse_mode="HTML",
            reply_markup=get_start_keyboard(user_id)
        )
        await message.answer(
            f"{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
            parse_mode="HTML",
            reply_markup=edit_trip_keyboard(user_id, trip_id)
        )
        await state.finish()
    except Exception as e:
        await message.reply(translate("‚ùï –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."), user_id)
        print(f"Error updating trip stops: {e}")
        await state.finish()
        
        
@dp.callback_query_handler(lambda c: c.data.startswith('changecar_'))
async def edit_trip(callback_query: types.CallbackQuery, state: FSMContext):
    trip_id = int(callback_query.data.split('_')[-1])
    user_id = callback_query.from_user.id
    cursor.execute("SELECT id, mark, number FROM users_cars WHERE user_id = ?", (user_id,))
    cars = cursor.fetchall()

    if not cars:
        await callback_query.message.answer(
            translate("‚ùï –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–≤—Ç–æ. –î–æ–¥–∞–π—Ç–µ –∞–≤—Ç–æ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.", user_id),
            reply_markup=get_start_keyboard(user_id)
        )
        return
    keyboard = InlineKeyboardMarkup(row_width=1)
    for car_id, mark, number in cars:
        button_text = f"{mark} : {number}"
        button = InlineKeyboardButton(text=button_text, callback_data=f"editchoosecar_{car_id}_{trip_id}")
        keyboard.add(button)
    keyboard.add(InlineKeyboardButton(translate("‚Üê –ù–∞–∑–∞–¥", user_id), callback_data="cancel_delete_trip_"))

    await callback_query.message.edit_text(
        translate("üöó –û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ –¥–ª—è –ø–æ—ó–∑–¥–∫–∏:", user_id),
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("editchoosecar_"))
async def handle_car_selection(callback_query: types.CallbackQuery):
    car_id = int(callback_query.data.split("_")[1])
    trip_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id
    cursor.execute("SELECT mark, number FROM users_cars WHERE id = ?", (car_id,))
    car_data = cursor.fetchone()

    if car_data:
        car_mark, car_number = car_data
    else:
        await callback_query.answer(translate("‚ùï –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ê–≤—Ç–æ–º–æ–±—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."), show_alert=True)
        return
    cursor.execute(
        "UPDATE trips SET car_id = ?, car_mark = ?, car_number = ? WHERE id = ?",
        (car_id, car_mark, car_number, trip_id)
    )
    conn.commit()
    cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
    trip = cursor.fetchone()

    if not trip:
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞. –ü–æ—ó–∑–¥–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", user_id), show_alert=True)
        return
    trip_text = get_trip_text(trip, user_id = callback_query.from_user.id)
    await callback_query.message.edit_text(
        f"{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
        parse_mode="HTML",
        reply_markup=edit_trip_keyboard(callback_query.from_user.id, trip_id)
    )
    await callback_query.answer(translate("‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", user_id))

        
        

@dp.callback_query_handler(lambda c: c.data.startswith('changeseats_'))
async def edit_trip(callback_query: types.CallbackQuery, state: FSMContext):
    trip_id = int(callback_query.data.split('_')[-1])
    user_id = callback_query.from_user.id
    cursor.execute("SELECT id, mark, number FROM users_cars WHERE user_id = ?", (user_id,))
    cars = cursor.fetchall()

    keyboard = InlineKeyboardMarkup(row_width=4)
    buttons = [InlineKeyboardButton(text=str(i), callback_data=f"editchooseseats_{i}_{trip_id}") for i in range(1, 17)]

    keyboard.add(*buttons)
    keyboard.add(
        InlineKeyboardButton(translate("‚Üê –ù–∞–∑–∞–¥", user_id), callback_data="cancel_delete_trip_"),
    )
    await callback_query.message.edit_text(translate(
        "üöó –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å –¥–ª—è –ø–æ—ó–∑–¥–∫–∏:", user_id), reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("editchooseseats_"))
async def handle_car_selection(callback_query: types.CallbackQuery):
    seats = int(callback_query.data.split("_")[1])
    trip_id = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id

    cursor.execute(
        "UPDATE trips SET seats = ? WHERE id = ?",
        (seats, trip_id)
    )
    conn.commit()
    cursor.execute("SELECT id, date, time, car_mark, car_number, stops, seats, watched FROM trips WHERE id = ?", (trip_id,))
    trip = cursor.fetchone()

    if not trip:
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞. –ü–æ—ó–∑–¥–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", user_id), show_alert=True)
        return
    trip_text = get_trip_text(trip, user_id = callback_query.from_user.id)
    
    await callback_query.message.edit_text(
        f"{trip_text}\n\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:",
        parse_mode="HTML",
        reply_markup=edit_trip_keyboard(callback_query.from_user.id, trip_id)
    )

        
        

@dp.callback_query_handler(lambda c: c.data.startswith("calendar_nav_create_"))
async def handle_calendar_navigation(callback_query: types.CallbackQuery):
    try:
        parts = callback_query.data.split("_")
        direction = parts[3]
        current_year = int(parts[4])
        current_month = int(parts[5])
        
        if direction == "prev":
            if current_month == 1:
                new_month = 12
                new_year = current_year - 1
            else:
                new_month = current_month - 1
                new_year = current_year
        else:  # next
            if current_month == 12:
                new_month = 1
                new_year = current_year + 1
            else:
                new_month = current_month + 1
                new_year = current_year
        
        user_id = callback_query.from_user.id
        
        markup = create_trip_calendar(user_id, new_year, new_month)
            
        await callback_query.message.edit_reply_markup(reply_markup=markup)
        await callback_query.answer()
        
    except Exception as e:
        print(f"Error in calendar navigation: {e}")
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è", user_id), show_alert=True)
    
    


@dp.callback_query_handler(lambda c: c.data.startswith("calendar_nav_repeat_"))
async def handle_calendar_navigation(callback_query: types.CallbackQuery):
    try:
        parts = callback_query.data.split("_")
        direction = parts[3]
        current_year = int(parts[4])
        current_month = int(parts[5])
        
        if direction == "prev":
            if current_month == 1:
                new_month = 12
                new_year = current_year - 1
            else:
                new_month = current_month - 1
                new_year = current_year
        else:  # next
            if current_month == 12:
                new_month = 1
                new_year = current_year + 1
            else:
                new_month = current_month + 1
                new_year = current_year
        
        user_id = callback_query.from_user.id
        
        markup = create_trip_calendar_repeat(user_id, new_year, new_month)
            
        await callback_query.message.edit_reply_markup(reply_markup=markup)
        await callback_query.answer()
        
    except Exception as e:
        print(f"Error in calendar navigation: {e}")
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∫–∞–ª–µ–Ω–¥–∞—Ä—è", user_id), show_alert=True)
    

@dp.callback_query_handler(lambda c: c.data.startswith('repeat_trip_'))
async def repeat_trip(callback_query: types.CallbackQuery):
    try:
        trip_id = int(callback_query.data.split('_')[-1])
        user_id = callback_query.from_user.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Å—Ç–∞—Ä—É –ø–æ—ó–∑–¥–∫—É
        cursor.execute("""
            SELECT car_id, car_mark, car_number, stops, seats
            FROM trips 
            WHERE id = ?
        """, (trip_id,))
        trip_data = cursor.fetchone()
        
        if not trip_data:
            await callback_query.answer(translate("‚ùï –ü–æ—ó–∑–¥–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", user_id), show_alert=True)
            return
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—ó–∑–¥–∫–∏
        user_trip_data[user_id] = {
            "car_id": trip_data[0],
            "car_mark": trip_data[1],
            "car_number": trip_data[2],
            "stops": trip_data[3],
            "seats": trip_data[4]
        }
        
        # –ü—Ä–æ—Å–∏–º–æ –æ–±—Ä–∞—Ç–∏ –Ω–æ–≤—É –¥–∞—Ç—É
        await callback_query.message.edit_text(
            select_date_text[get_user_lang(user_id)],
            parse_mode="HTML",
            reply_markup=create_trip_calendar_repeat(user_id)
        )
        
    except Exception as e:
        print(f"Error in repeat trip: {e}")
        await callback_query.answer(translate("‚ùï –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ñ –ø–æ—ó–∑–¥–∫–∏", user_id), show_alert=True)


@dp.callback_query_handler(lambda c: c.data.startswith('repeattrip_'))
async def handle_repeat_trip_selection(callback_query: types.CallbackQuery):
    date_str = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    user_trip_data[user_id]["repeat_date"] = selected_date
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—É
    await callback_query.message.edit_text(
        select_time_text[get_user_lang(user_id)],
        parse_mode="HTML",
        reply_markup=create_hour_keyboard(user_id)
    )
    await callback_query.answer()



@dp.callback_query_handler(lambda c: c.data == "confirm_repeat_trip")
async def confirm_repeat_trip(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    trip_data = user_trip_data[user_id]
    selected_date = trip_data["repeat_date"]
    selected_time = trip_data["time"]
    
    # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å –¥–ª—è –ø–æ–ª—è created_at
    created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–æ–≤—É –ø–æ—ó–∑–¥–∫—É –≤ —Ç–∞–±–ª–∏—Ü—é trips
    cursor.execute("""
        INSERT INTO trips (user_id, car_id, date, time, car_mark, car_number, seats, stops, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        user_id,
        trip_data["car_id"],
        selected_date.strftime('%Y-%m-%d'),
        selected_time,
        trip_data["car_mark"],
        trip_data["car_number"],
        trip_data["seats"],
        trip_data["stops"],
        created_at
    ))
    conn.commit()
    
    await callback_query.message.edit_text(
        translate("<b>‚úÖ –ü–æ—ó–∑–¥–∫—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>", user_id),
        parse_mode="HTML"
    )
    await callback_query.answer()
    
    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_trip_data:
        del user_trip_data[user_id]

@dp.callback_query_handler(lambda c: c.data == "cancel_repeat_trip")
async def cancel_repeat_trip(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(
        translate("<b>‚ùï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b>", user_id),
        parse_mode="HTML"
    )
    await callback_query.answer()
    
    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_trip_data:
        del user_trip_data[user_id]





    
        
        
