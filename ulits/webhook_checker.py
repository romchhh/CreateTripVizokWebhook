import asyncio
import aiohttp
from ulits.webhook_client import webhook_client
from handlers.create_trip_handlers import handle_webhook_data

async def check_webhook_data():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î webhook –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏"""
    print("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É webhook –¥–∞–Ω–∏—Ö")
    
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{webhook_client.base_url}/get_trips") as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        for trip_data in data.get('trips', []):
                            await handle_webhook_data(trip_data)
                            
                            # –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                            user_id = trip_data.get('user_id')
                            if user_id:
                                await session.delete(f"{webhook_client.base_url}/clear_data/{user_id}")
                                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ webhook –¥–∞–Ω–∏—Ö: {e}")
            
        await asyncio.sleep(2)

def start_webhook_checker():
    """–ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É webhook –¥–∞–Ω–∏—Ö"""
    print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è webhook checker")
    asyncio.create_task(check_webhook_data()) 