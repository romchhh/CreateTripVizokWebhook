"""
–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import aiohttp
import asyncio
import logging
from typing import Optional, Dict, Any
import json

logger = logging.getLogger(__name__)

class WebHookClient:
    def __init__(self, webhook_server_url: str = "http://localhost:8001"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–æ–º
        
        Args:
            webhook_server_url: URL –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–µ –±—É—Ç–∏ IP –∞–±–æ –¥–æ–º–µ–Ω)
        """
        self.base_url = webhook_server_url.rstrip('/')
        
    async def get_cities_for_user(self, user_id: str) -> Optional[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º—É—î –º—ñ—Å—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –º—ñ—Å—Ç–∞–º–∏ –∞–±–æ None —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/get_cities/{user_id}"
                
                async with session.get(url, timeout=5) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get("status") == "success":
                            logger.info(f"üîó Got cities for user {user_id}: {data['data']['cities_string']}")
                            return data["data"]
                        else:
                            logger.debug(f"üîó No cities found for user {user_id}")
                            return None
                    else:
                        logger.warning(f"üîó Failed to get cities for user {user_id}: {response.status}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.warning(f"üîó Timeout getting cities for user {user_id}")
            return None
        except Exception as e:
            logger.error(f"üîó Error getting cities for user {user_id}: {e}")
            return None
    
    async def clear_cities_for_user(self, user_id: str) -> bool:
        """
        –û—á–∏—â–∞—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä—ñ
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/clear_cities/{user_id}"
                
                async with session.delete(url, timeout=5) as response:
                    if response.status == 200:
                        logger.info(f"üîó Cleared cities for user {user_id}")
                        return True
                    else:
                        logger.warning(f"üîó Failed to clear cities for user {user_id}: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"üîó Error clearing cities for user {user_id}: {e}")
            return False
    
    async def check_health(self) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–¥–æ—Ä–æ–≤'—è –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            True —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î
        """
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/health"
                
                async with session.get(url, timeout=3) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"üîó WebHook server is healthy: {data.get('users_count', 0)} users")
                        return True
                    else:
                        logger.warning(f"üîó WebHook server unhealthy: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"üîó WebHook server check failed: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç (–±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤ main.py)
webhook_client: Optional[WebHookClient] = None

def init_webhook_client(server_url: str = "http://localhost:8001"):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –≤–µ–±—Ö—É–∫ –∫–ª—ñ—î–Ω—Ç"""
    global webhook_client
    webhook_client = WebHookClient(server_url)
    logger.info(f"üîó WebHook client initialized for {server_url}")

async def get_user_cities_from_webhook(user_id: str) -> Optional[Dict[str, Any]]:
    """
    –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –º—ñ—Å—Ç–∞–º–∏ –∞–±–æ None
    """
    if webhook_client:
        return await webhook_client.get_cities_for_user(str(user_id))
    else:
        logger.warning("üîó WebHook client not initialized")
        return None

async def clear_user_cities_webhook(user_id: str) -> bool:
    """
    –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
    """
    if webhook_client:
        return await webhook_client.clear_cities_for_user(str(user_id))
    else:
        logger.warning("üîó WebHook client not initialized")
        return False 